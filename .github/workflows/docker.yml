name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      # Try building with regular Dockerfile
      - name: Build and push Docker image
        id: docker-build
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # If regular build fails, try with the alternative Dockerfile
      - name: Build and push with alternative Dockerfile if main build failed
        if: steps.docker-build.outcome == 'failure'
        run: |
          echo "Main Docker build failed, trying with alternative Dockerfile..."
          
          # Create a temporary Dockerfile from the alternative
          cp Dockerfile.alt Dockerfile
          
          # Run docker build directly
          docker build -t ghcr.io/${{ github.repository }}:latest .
          docker push ghcr.io/${{ github.repository }}:latest
          
          echo "Alternative Docker build completed successfully."

  deploy-to-pages:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Run the container to extract static files
      - name: Pull and run container to extract static files
        run: |
          mkdir -p _site
          docker pull ghcr.io/${{ github.repository }}:latest
          docker create --name temp-container ghcr.io/${{ github.repository }}:latest
          docker cp temp-container:/usr/share/nginx/html/. _site/
          docker rm temp-container
          # Fix file permissions
          chmod -R 755 _site
          
          # Print directory contents for debugging
          echo "Contents of _site directory:"
          ls -la _site/
          echo "Contents of _site/assets directory (if it exists):"
          ls -la _site/assets/ || echo "No assets directory found"

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Upload artifact - using a stable version
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: '_site'

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 